// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: user.proto

package server

import (
	"context"

	"github.com/mirage208/gomall/app/user/rpc/internal/logic"
	"github.com/mirage208/gomall/app/user/rpc/internal/svc"
	"github.com/mirage208/gomall/app/user/rpc/pb/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// user
func (s *UserServer) Register(ctx context.Context, in *user.RegisterReq) (*user.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserServer) Login(ctx context.Context, in *user.LoginReq) (*user.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServer) GenerateToken(ctx context.Context, in *user.GenerateTokenReq) (*user.GenerateTokenResp, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}

func (s *UserServer) Logout(ctx context.Context, in *user.LogoutReq) (*user.LogoutResp, error) {
	l := logic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

func (s *UserServer) GetUserInfo(ctx context.Context, in *user.GetUserInfoReq) (*user.GetUserInfoResp, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UserServer) UpdateEmail(ctx context.Context, in *user.UpdateEmailReq) (*user.UpdateEmailResp, error) {
	l := logic.NewUpdateEmailLogic(ctx, s.svcCtx)
	return l.UpdateEmail(in)
}

func (s *UserServer) UpdatePassword(ctx context.Context, in *user.UpdatePasswordReq) (*user.UpdatePasswordResp, error) {
	l := logic.NewUpdatePasswordLogic(ctx, s.svcCtx)
	return l.UpdatePassword(in)
}

func (s *UserServer) UpdateUserInfo(ctx context.Context, in *user.UpdateUserInfoReq) (*user.UpdateUserInfoResp, error) {
	l := logic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}

func (s *UserServer) GetUserMoney(ctx context.Context, in *user.GetUserMoneyReq) (*user.GetUserMoneyResp, error) {
	l := logic.NewGetUserMoneyLogic(ctx, s.svcCtx)
	return l.GetUserMoney(in)
}

// userAddress
func (s *UserServer) GetUserAddressList(ctx context.Context, in *user.GetUserAddressListReq) (*user.GetUserAddressListResp, error) {
	l := logic.NewGetUserAddressListLogic(ctx, s.svcCtx)
	return l.GetUserAddressList(in)
}

func (s *UserServer) CreateUserAddress(ctx context.Context, in *user.CreateUserAddressReq) (*user.CreateUserAddressResp, error) {
	l := logic.NewCreateUserAddressLogic(ctx, s.svcCtx)
	return l.CreateUserAddress(in)
}

func (s *UserServer) UpdateUserAddress(ctx context.Context, in *user.UpdateUserAddressReq) (*user.UpdateUserAddressResp, error) {
	l := logic.NewUpdateUserAddressLogic(ctx, s.svcCtx)
	return l.UpdateUserAddress(in)
}

func (s *UserServer) DeleteUserAddress(ctx context.Context, in *user.DeleteUserAddressReq) (*user.DeleteUserAddressResp, error) {
	l := logic.NewDeleteUserAddressLogic(ctx, s.svcCtx)
	return l.DeleteUserAddress(in)
}

func (s *UserServer) GetUserAddressDetail(ctx context.Context, in *user.GetUserAddressDetailReq) (*user.GetUserAddressDetailResp, error) {
	l := logic.NewGetUserAddressDetailLogic(ctx, s.svcCtx)
	return l.GetUserAddressDetail(in)
}

// other
func (s *UserServer) CheckUserExists(ctx context.Context, in *user.CheckUserExistsReq) (*user.CheckUserExistsResp, error) {
	l := logic.NewCheckUserExistsLogic(ctx, s.svcCtx)
	return l.CheckUserExists(in)
}

func (s *UserServer) CheckUserAndAddressExists(ctx context.Context, in *user.CheckUserAndAddressExistsReq) (*user.CheckUserAndAddressExistsResp, error) {
	l := logic.NewCheckUserAndAddressExistsLogic(ctx, s.svcCtx)
	return l.CheckUserAndAddressExists(in)
}

func (s *UserServer) UpdateUserMoney(ctx context.Context, in *user.UpdateUserMoneyReq) (*user.UpdateUserMoneyResp, error) {
	l := logic.NewUpdateUserMoneyLogic(ctx, s.svcCtx)
	return l.UpdateUserMoney(in)
}
