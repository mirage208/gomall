// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userHeaderImageFieldNames          = builder.RawFieldNames(&UserHeaderImage{})
	userHeaderImageRows                = strings.Join(userHeaderImageFieldNames, ",")
	userHeaderImageRowsExpectAutoSet   = strings.Join(stringx.Remove(userHeaderImageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userHeaderImageRowsWithPlaceHolder = strings.Join(stringx.Remove(userHeaderImageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userHeaderImageModel interface {
		Insert(ctx context.Context, data *UserHeaderImage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserHeaderImage, error)
		Update(ctx context.Context, data *UserHeaderImage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserHeaderImageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserHeaderImage struct {
		Id         int64     `db:"id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"` // 删除状态：0-未删除，1-已删除
		Path       string    `db:"path"`      // 图片路径
		Type       int64     `db:"type"`      // 图片存储类型：1-本地存储，2-七牛云存储
		Hash       string    `db:"hash"`      // 图片hash值，防止重复图片上传
	}
)

func newUserHeaderImageModel(conn sqlx.SqlConn) *defaultUserHeaderImageModel {
	return &defaultUserHeaderImageModel{
		conn:  conn,
		table: "`user_header_image`",
	}
}

func (m *defaultUserHeaderImageModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserHeaderImageModel) FindOne(ctx context.Context, id int64) (*UserHeaderImage, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userHeaderImageRows, m.table)
	var resp UserHeaderImage
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserHeaderImageModel) Insert(ctx context.Context, data *UserHeaderImage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userHeaderImageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Path, data.Type, data.Hash)
	return ret, err
}

func (m *defaultUserHeaderImageModel) Update(ctx context.Context, data *UserHeaderImage) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userHeaderImageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Path, data.Type, data.Hash, data.Id)
	return err
}

func (m *defaultUserHeaderImageModel) tableName() string {
	return m.table
}
