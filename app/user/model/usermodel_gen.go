// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByMobile(ctx context.Context, mobile string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id            int64     `db:"id"`
		CreateTime    time.Time `db:"create_time"`
		UpdateTime    time.Time `db:"update_time"`
		DeleteTime    time.Time `db:"delete_time"`
		DelState      int64     `db:"del_state"`       // 删除状态：0-未删除，1-已删除
		Mobile        string    `db:"mobile"`          // 手机号
		Username      string    `db:"username"`        // 用户名
		Password      string    `db:"password"`        // 密码
		Email         string    `db:"email"`           // 邮箱
		Sex           int64     `db:"sex"`             // 性别：1-男性，2-女性
		HeaderImageId int64     `db:"header_image_id"` // 用户图像id
		Signature     string    `db:"signature"`       // 个性签名
		Introduction  string    `db:"introduction"`    // 自我介绍
		Money         int64     `db:"money"`           // 用户账户余额(单位：分)
		SignStatus    int64     `db:"sign_status"`     // 注册来源：1-网站注册，2-qq注册，3-微信注册
		Role          int64     `db:"role"`            // 权限：-1-被禁用用户，1-普通用户,2-管理员
		IsBoss        int64     `db:"is_boss"`         // 是否为商家：0-不是，1-是
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByMobile(ctx context.Context, mobile string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `mobile` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, mobile)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Mobile, data.Username, data.Password, data.Email, data.Sex, data.HeaderImageId, data.Signature, data.Introduction, data.Money, data.SignStatus, data.Role, data.IsBoss)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Mobile, newData.Username, newData.Password, newData.Email, newData.Sex, newData.HeaderImageId, newData.Signature, newData.Introduction, newData.Money, newData.SignStatus, newData.Role, newData.IsBoss, newData.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
