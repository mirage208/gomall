// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	favoriteProductFieldNames          = builder.RawFieldNames(&FavoriteProduct{})
	favoriteProductRows                = strings.Join(favoriteProductFieldNames, ",")
	favoriteProductRowsExpectAutoSet   = strings.Join(stringx.Remove(favoriteProductFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	favoriteProductRowsWithPlaceHolder = strings.Join(stringx.Remove(favoriteProductFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	favoriteProductModel interface {
		Insert(ctx context.Context, data *FavoriteProduct) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FavoriteProduct, error)
		Update(ctx context.Context, data *FavoriteProduct) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFavoriteProductModel struct {
		conn  sqlx.SqlConn
		table string
	}

	FavoriteProduct struct {
		Id           int64     `db:"id"`
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
		DeleteTime   time.Time `db:"delete_time"`
		DelState     int64     `db:"del_state"` // 删除状态 0:未删除 1:已删除
		UserId       int64     `db:"user_id"`   // 用户id
		ProductId    int64     `db:"product_id"`
		ProductTitle string    `db:"product_title"` // 商品标题
		StoreId      int64     `db:"store_id"`      // 收藏商品店铺id
	}
)

func newFavoriteProductModel(conn sqlx.SqlConn) *defaultFavoriteProductModel {
	return &defaultFavoriteProductModel{
		conn:  conn,
		table: "`favorite_product`",
	}
}

func (m *defaultFavoriteProductModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFavoriteProductModel) FindOne(ctx context.Context, id int64) (*FavoriteProduct, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", favoriteProductRows, m.table)
	var resp FavoriteProduct
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFavoriteProductModel) Insert(ctx context.Context, data *FavoriteProduct) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, favoriteProductRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.UserId, data.ProductId, data.ProductTitle, data.StoreId)
	return ret, err
}

func (m *defaultFavoriteProductModel) Update(ctx context.Context, data *FavoriteProduct) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, favoriteProductRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.UserId, data.ProductId, data.ProductTitle, data.StoreId, data.Id)
	return err
}

func (m *defaultFavoriteProductModel) tableName() string {
	return m.table
}
