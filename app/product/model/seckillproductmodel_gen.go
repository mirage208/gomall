// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	seckillProductFieldNames          = builder.RawFieldNames(&SeckillProduct{})
	seckillProductRows                = strings.Join(seckillProductFieldNames, ",")
	seckillProductRowsExpectAutoSet   = strings.Join(stringx.Remove(seckillProductFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	seckillProductRowsWithPlaceHolder = strings.Join(stringx.Remove(seckillProductFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	seckillProductModel interface {
		Insert(ctx context.Context, data *SeckillProduct) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SeckillProduct, error)
		Update(ctx context.Context, data *SeckillProduct) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSeckillProductModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SeckillProduct struct {
		Id           int64     `db:"id"`
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
		DeleteTime   time.Time `db:"delete_time"`
		DelState     int64     `db:"del_state"`     // 删除状态，0-未删除，1-已删除
		Version      int64     `db:"version"`       // 乐观锁版本号
		ProductId    int64     `db:"product_id"`    // 参与秒杀的商品id
		StoreId      int64     `db:"store_id"`      // 秒杀商品的店铺id
		SeckillPrice int64     `db:"seckill_price"` // 商品秒杀价格（分）
		StockCount   int64     `db:"stock_count"`   // 秒杀商品的库存
		StartTime    time.Time `db:"start_time"`    // 秒杀开始日期（不包括具体时间）
		Time         int64     `db:"time"`          // 秒杀开始的整点时间（时间为10，12，14）
	}
)

func newSeckillProductModel(conn sqlx.SqlConn) *defaultSeckillProductModel {
	return &defaultSeckillProductModel{
		conn:  conn,
		table: "`seckill_product`",
	}
}

func (m *defaultSeckillProductModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSeckillProductModel) FindOne(ctx context.Context, id int64) (*SeckillProduct, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", seckillProductRows, m.table)
	var resp SeckillProduct
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSeckillProductModel) Insert(ctx context.Context, data *SeckillProduct) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, seckillProductRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.ProductId, data.StoreId, data.SeckillPrice, data.StockCount, data.StartTime, data.Time)
	return ret, err
}

func (m *defaultSeckillProductModel) Update(ctx context.Context, data *SeckillProduct) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, seckillProductRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.ProductId, data.StoreId, data.SeckillPrice, data.StockCount, data.StartTime, data.Time, data.Id)
	return err
}

func (m *defaultSeckillProductModel) tableName() string {
	return m.table
}
