// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productStoreFieldNames          = builder.RawFieldNames(&ProductStore{})
	productStoreRows                = strings.Join(productStoreFieldNames, ",")
	productStoreRowsExpectAutoSet   = strings.Join(stringx.Remove(productStoreFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productStoreRowsWithPlaceHolder = strings.Join(stringx.Remove(productStoreFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	productStoreModel interface {
		Insert(ctx context.Context, data *ProductStore) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductStore, error)
		Update(ctx context.Context, data *ProductStore) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductStoreModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ProductStore struct {
		Id           int64     `db:"id"`
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
		DeleteTime   time.Time `db:"delete_time"`
		DelState     int64     `db:"del_state"`    // 删除状态，0-未删除，1-已删除
		Title        string    `db:"title"`        // 店铺名称
		BossId       int64     `db:"boss_id"`      // 店主用户id
		Introduction string    `db:"introduction"` // 店铺介绍
		State        int64     `db:"state"`        // 0-禁止营业，1-正常营业
		CollectNum   int64     `db:"collect_num"`  // 店铺收藏数
		Cover        string    `db:"cover"`        // 封面图
	}
)

func newProductStoreModel(conn sqlx.SqlConn) *defaultProductStoreModel {
	return &defaultProductStoreModel{
		conn:  conn,
		table: "`product_store`",
	}
}

func (m *defaultProductStoreModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProductStoreModel) FindOne(ctx context.Context, id int64) (*ProductStore, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productStoreRows, m.table)
	var resp ProductStore
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductStoreModel) Insert(ctx context.Context, data *ProductStore) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, productStoreRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Title, data.BossId, data.Introduction, data.State, data.CollectNum, data.Cover)
	return ret, err
}

func (m *defaultProductStoreModel) Update(ctx context.Context, data *ProductStore) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productStoreRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Title, data.BossId, data.Introduction, data.State, data.CollectNum, data.Cover, data.Id)
	return err
}

func (m *defaultProductStoreModel) tableName() string {
	return m.table
}
