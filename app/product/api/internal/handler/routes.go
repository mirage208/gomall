// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package handler

import (
	"net/http"

	commonProduct "github.com/mirage208/gomall/app/product/api/internal/handler/commonProduct"
	seckillProduct "github.com/mirage208/gomall/app/product/api/internal/handler/seckillProduct"
	storeProduct "github.com/mirage208/gomall/app/product/api/internal/handler/storeProduct"
	userProduct "github.com/mirage208/gomall/app/product/api/internal/handler/userProduct"
	"github.com/mirage208/gomall/app/product/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 首页商品轮播图
				Method:  http.MethodGet,
				Path:    "/homepage/carousel",
				Handler: commonProduct.CarouselHandler(serverCtx),
			},
			{
				// 首页分类名称列表
				Method:  http.MethodGet,
				Path:    "/homepage/categorylist",
				Handler: commonProduct.CategoryListHandler(serverCtx),
			},
			{
				// 首页商品推荐列表
				Method:  http.MethodGet,
				Path:    "/homepage/recommend",
				Handler: commonProduct.RecommendHandler(serverCtx),
			},
			{
				// 商品搜索
				Method:  http.MethodPost,
				Path:    "/homepage/search",
				Handler: commonProduct.SearchProductHandler(serverCtx),
			},
			{
				// 商品分类列表
				Method:  http.MethodGet,
				Path:    "/product/category",
				Handler: commonProduct.CategoryProductListHandler(serverCtx),
			},
			{
				// 商品详情信息
				Method:  http.MethodGet,
				Path:    "/product/detail",
				Handler: commonProduct.ProductDetailHandler(serverCtx),
			},
		},
		rest.WithPrefix("/product/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 秒杀商品详情
				Method:  http.MethodGet,
				Path:    "/seckill/detail",
				Handler: seckillProduct.SeckillDetailHandler(serverCtx),
			},
			{
				// 秒杀商品列表
				Method:  http.MethodGet,
				Path:    "/seckill/list",
				Handler: seckillProduct.SeckillListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/product/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckStoreState},
			[]rest.Route{
				{
					// 上传商品（未上架）
					Method:  http.MethodPost,
					Path:    "/store/product",
					Handler: storeProduct.CreateProductHandler(serverCtx),
				},
				{
					// 修改商品信息
					Method:  http.MethodPut,
					Path:    "/store/product",
					Handler: storeProduct.UpdateProductHandler(serverCtx),
				},
				{
					// 删除商品
					Method:  http.MethodDelete,
					Path:    "/store/product",
					Handler: storeProduct.DeleteProductHandler(serverCtx),
				},
				{
					// 添加秒杀商品
					Method:  http.MethodPost,
					Path:    "/store/seckill",
					Handler: storeProduct.CreateSeckillHandler(serverCtx),
				},
				{
					// 删除秒杀商品
					Method:  http.MethodDelete,
					Path:    "/store/seckill",
					Handler: storeProduct.DeleteSeckillHandler(serverCtx),
				},
				{
					// 上架商品
					Method:  http.MethodPost,
					Path:    "/store/shelf",
					Handler: storeProduct.ShelfProductHandler(serverCtx),
				},
				{
					// 下架商品
					Method:  http.MethodPost,
					Path:    "/store/soldout",
					Handler: storeProduct.SoldoutProductHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/product/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckUserState},
			[]rest.Route{
				{
					// 添加收藏商品
					Method:  http.MethodPost,
					Path:    "/collect/product",
					Handler: userProduct.CreateCollectProductHandler(serverCtx),
				},
				{
					// 收藏商品列表
					Method:  http.MethodGet,
					Path:    "/collect/product",
					Handler: userProduct.CollectProductListHandler(serverCtx),
				},
				{
					// 删除收藏商品
					Method:  http.MethodDelete,
					Path:    "/collect/product",
					Handler: userProduct.DeleteCollectProductHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/product/v1"),
	)
}
