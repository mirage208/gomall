// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentFieldNames          = builder.RawFieldNames(&Payment{})
	paymentRows                = strings.Join(paymentFieldNames, ",")
	paymentRowsExpectAutoSet   = strings.Join(stringx.Remove(paymentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	paymentRowsWithPlaceHolder = strings.Join(stringx.Remove(paymentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	paymentModel interface {
		Insert(ctx context.Context, data *Payment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Payment, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*Payment, error)
		FindOneByPaymentSn(ctx context.Context, paymentSn string) (*Payment, error)
		Update(ctx context.Context, data *Payment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPaymentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Payment struct {
		Id             int64     `db:"id"`
		CreateTime     time.Time `db:"create_time"`
		UpdateTime     time.Time `db:"update_time"`
		DeleteTime     time.Time `db:"delete_time"`
		DelState       int64     `db:"del_state"`  // 删除状态：0-未删除；1-已删除
		Version        int64     `db:"version"`    // 乐观锁版本号
		PaymentSn      string    `db:"payment_sn"` // 支付流水单号
		OrderSn        string    `db:"order_sn"`   // 订单号
		UserId         int64     `db:"user_id"`
		PayMode        int64     `db:"pay_mode"`         // 支付方式：1-平台钱包支付，2-微信支付，3-支付宝支付
		TradeType      string    `db:"trade_type"`       // 第三方支付类型
		TradeState     string    `db:"trade_state"`      // 第三方支付状态
		PayTotal       int64     `db:"pay_total"`        // 支付总金额（分）
		TransactionId  string    `db:"transaction_id"`   // 第三方支付单号
		TradeStateDesc string    `db:"trade_state_desc"` // 支付状态描述
		PayStatus      int64     `db:"pay_status"`       // 交易状态：-1-支付失败；0-未支付；1-支付成功；2-已退款
		PayTime        time.Time `db:"pay_time"`         // 支付成功时间
	}
)

func newPaymentModel(conn sqlx.SqlConn) *defaultPaymentModel {
	return &defaultPaymentModel{
		conn:  conn,
		table: "`payment`",
	}
}

func (m *defaultPaymentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPaymentModel) FindOne(ctx context.Context, id int64) (*Payment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paymentRows, m.table)
	var resp Payment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*Payment, error) {
	var resp Payment
	query := fmt.Sprintf("select %s from %s where `order_sn` = ? limit 1", paymentRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderSn)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentModel) FindOneByPaymentSn(ctx context.Context, paymentSn string) (*Payment, error) {
	var resp Payment
	query := fmt.Sprintf("select %s from %s where `payment_sn` = ? limit 1", paymentRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, paymentSn)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentModel) Insert(ctx context.Context, data *Payment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, paymentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.PaymentSn, data.OrderSn, data.UserId, data.PayMode, data.TradeType, data.TradeState, data.PayTotal, data.TransactionId, data.TradeStateDesc, data.PayStatus, data.PayTime)
	return ret, err
}

func (m *defaultPaymentModel) Update(ctx context.Context, newData *Payment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paymentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.PaymentSn, newData.OrderSn, newData.UserId, newData.PayMode, newData.TradeType, newData.TradeState, newData.PayTotal, newData.TransactionId, newData.TradeStateDesc, newData.PayStatus, newData.PayTime, newData.Id)
	return err
}

func (m *defaultPaymentModel) tableName() string {
	return m.table
}
