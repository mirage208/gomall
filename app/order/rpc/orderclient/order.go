// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: order.proto

package orderclient

import (
	"context"

	"github.com/mirage208/gomall/app/order/rpc/pb/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateOrderReq            = order.CreateOrderReq
	CreateOrderResp           = order.CreateOrderResp
	Order                     = order.Order
	OrderDetailReq            = order.OrderDetailReq
	OrderDetailResp           = order.OrderDetailResp
	UpdateOrderTradeStateReq  = order.UpdateOrderTradeStateReq
	UpdateOrderTradeStateResp = order.UpdateOrderTradeStateResp
	UserOrderListReq          = order.UserOrderListReq
	UserOrderListResp         = order.UserOrderListResp

	OrderZrpcClient interface {
		// 下订单
		CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error)
		// 订单详情
		OrderDetail(ctx context.Context, in *OrderDetailReq, opts ...grpc.CallOption) (*OrderDetailResp, error)
		// 更新订单状态
		UpdateOrderTradeState(ctx context.Context, in *UpdateOrderTradeStateReq, opts ...grpc.CallOption) (*UpdateOrderTradeStateResp, error)
		// 用户订单
		UserOrderList(ctx context.Context, in *UserOrderListReq, opts ...grpc.CallOption) (*UserOrderListResp, error)
	}

	defaultOrderZrpcClient struct {
		cli zrpc.Client
	}
)

func NewOrderZrpcClient(cli zrpc.Client) OrderZrpcClient {
	return &defaultOrderZrpcClient{
		cli: cli,
	}
}

// 下订单
func (m *defaultOrderZrpcClient) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

// 订单详情
func (m *defaultOrderZrpcClient) OrderDetail(ctx context.Context, in *OrderDetailReq, opts ...grpc.CallOption) (*OrderDetailResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.OrderDetail(ctx, in, opts...)
}

// 更新订单状态
func (m *defaultOrderZrpcClient) UpdateOrderTradeState(ctx context.Context, in *UpdateOrderTradeStateReq, opts ...grpc.CallOption) (*UpdateOrderTradeStateResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateOrderTradeState(ctx, in, opts...)
}

// 用户订单
func (m *defaultOrderZrpcClient) UserOrderList(ctx context.Context, in *UserOrderListReq, opts ...grpc.CallOption) (*UserOrderListResp, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UserOrderList(ctx, in, opts...)
}
