// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: order.proto

package server

import (
	"context"

	"github.com/mirage208/gomall/app/order/rpc/internal/logic"
	"github.com/mirage208/gomall/app/order/rpc/internal/svc"
	"github.com/mirage208/gomall/app/order/rpc/pb/order"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServer
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderServer) CreateProductOrder(ctx context.Context, in *order.CreateProductOrderReq) (*order.CreateOrderResp, error) {
	l := logic.NewCreateProductOrderLogic(ctx, s.svcCtx)
	return l.CreateProductOrder(in)
}

func (s *OrderServer) CreateSeckillOrder(ctx context.Context, in *order.CreateSeckillOrderReq) (*order.CreateOrderResp, error) {
	l := logic.NewCreateSeckillOrderLogic(ctx, s.svcCtx)
	return l.CreateSeckillOrder(in)
}

func (s *OrderServer) OrderList(ctx context.Context, in *order.OrderListReq) (*order.OrderListResp, error) {
	l := logic.NewOrderListLogic(ctx, s.svcCtx)
	return l.OrderList(in)
}

func (s *OrderServer) OrderDetail(ctx context.Context, in *order.OrderDetailReq) (*order.OrderDetailResp, error) {
	l := logic.NewOrderDetailLogic(ctx, s.svcCtx)
	return l.OrderDetail(in)
}

func (s *OrderServer) DeleteOrder(ctx context.Context, in *order.DeleteOrderReq) (*order.DeleteOrderResp, error) {
	l := logic.NewDeleteOrderLogic(ctx, s.svcCtx)
	return l.DeleteOrder(in)
}

func (s *OrderServer) UpdateOrderStatus(ctx context.Context, in *order.UpdateOrderStatusReq) (*order.UpdateOrderStatusResp, error) {
	l := logic.NewUpdateOrderStatusLogic(ctx, s.svcCtx)
	return l.UpdateOrderStatus(in)
}

// other
func (s *OrderServer) GetOrderOnlyDetail(ctx context.Context, in *order.GetOrderOnlyDetailReq) (*order.GetOrderOnlyDetailResp, error) {
	l := logic.NewGetOrderOnlyDetailLogic(ctx, s.svcCtx)
	return l.GetOrderOnlyDetail(in)
}
