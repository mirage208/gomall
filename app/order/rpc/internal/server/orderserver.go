// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: order.proto

package server

import (
	"context"

	"github.com/mirage208/gomall/app/order/rpc/internal/logic"
	"github.com/mirage208/gomall/app/order/rpc/internal/svc"
	"github.com/mirage208/gomall/app/order/rpc/pb/order"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServer
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

// 下订单
func (s *OrderServer) CreateOrder(ctx context.Context, in *order.CreateOrderReq) (*order.CreateOrderResp, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

// 订单详情
func (s *OrderServer) OrderDetail(ctx context.Context, in *order.OrderDetailReq) (*order.OrderDetailResp, error) {
	l := logic.NewOrderDetailLogic(ctx, s.svcCtx)
	return l.OrderDetail(in)
}

// 更新订单状态
func (s *OrderServer) UpdateOrderTradeState(ctx context.Context, in *order.UpdateOrderTradeStateReq) (*order.UpdateOrderTradeStateResp, error) {
	l := logic.NewUpdateOrderTradeStateLogic(ctx, s.svcCtx)
	return l.UpdateOrderTradeState(in)
}

// 用户订单
func (s *OrderServer) UserOrderList(ctx context.Context, in *order.UserOrderListReq) (*order.UserOrderListResp, error) {
	l := logic.NewUserOrderListLogic(ctx, s.svcCtx)
	return l.UserOrderList(in)
}
