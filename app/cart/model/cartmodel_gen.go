// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cartFieldNames          = builder.RawFieldNames(&Cart{})
	cartRows                = strings.Join(cartFieldNames, ",")
	cartRowsExpectAutoSet   = strings.Join(stringx.Remove(cartFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	cartRowsWithPlaceHolder = strings.Join(stringx.Remove(cartFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCartIdPrefix = "cache:cart:id:"
)

type (
	cartModel interface {
		Insert(ctx context.Context, data *Cart) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Cart, error)
		Update(ctx context.Context, data *Cart) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCartModel struct {
		sqlc.CachedConn
		table string
	}

	Cart struct {
		Id         int64     `db:"id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"` // 删除状态：0-未删除；1-已删除
		UserId     int64     `db:"user_id"`
		ProductId  int64     `db:"product_id"`
		Count      int64     `db:"count"`   // 数量
		Checked    int64     `db:"checked"` // 是否勾选：1-已勾选，0-未勾选
	}
)

func newCartModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCartModel {
	return &defaultCartModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`cart`",
	}
}

func (m *defaultCartModel) Delete(ctx context.Context, id int64) error {
	cartIdKey := fmt.Sprintf("%s%v", cacheCartIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cartIdKey)
	return err
}

func (m *defaultCartModel) FindOne(ctx context.Context, id int64) (*Cart, error) {
	cartIdKey := fmt.Sprintf("%s%v", cacheCartIdPrefix, id)
	var resp Cart
	err := m.QueryRowCtx(ctx, &resp, cartIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cartRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartModel) Insert(ctx context.Context, data *Cart) (sql.Result, error) {
	cartIdKey := fmt.Sprintf("%s%v", cacheCartIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, cartRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.UserId, data.ProductId, data.Count, data.Checked)
	}, cartIdKey)
	return ret, err
}

func (m *defaultCartModel) Update(ctx context.Context, data *Cart) error {
	cartIdKey := fmt.Sprintf("%s%v", cacheCartIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cartRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.UserId, data.ProductId, data.Count, data.Checked, data.Id)
	}, cartIdKey)
	return err
}

func (m *defaultCartModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCartIdPrefix, primary)
}

func (m *defaultCartModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cartRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCartModel) tableName() string {
	return m.table
}
